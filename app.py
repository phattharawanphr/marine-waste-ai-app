import streamlit as st
from PIL import Image
import io, base64, requests, json

#‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="üåä Marine Waste AI", page_icon="üåä", layout="wide")

#‡∏™‡∏µ
st.markdown("""
<style>
[data-testid="stAppViewContainer"] {
  background: linear-gradient(to bottom, #e0f7fa, #ffffff);
}
[data-testid="stSidebar"] { background-color: #b3e5fc; }
h1, h2, h3, h4, h5 { color: #01579b; }
</style>
""", unsafe_allow_html=True)

st.sidebar.title("üåê Marine Waste AI")
st.sidebar.header("üìò About the Developer")
st.sidebar.markdown("""
**‡∏ô.‡∏™.‡∏†‡∏±‡∏ó‡∏£‡∏≤‡∏ß‡∏£‡∏£‡∏ì ‡∏û‡∏£‡∏´‡∏°‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡∏§‡∏ó‡∏ò‡∏¥‡πå**   
‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ **681110071**

‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AI ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞‡∏ó‡∏∞‡πÄ‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
""")

st.title("üåä Marine Waste AI")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞‡∏ó‡∏∞‡πÄ‡∏•")

#‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Roboflow
API_KEY = "TCwrOT5oJu5pTNpnNKSV" 
MODEL_PATH = "marine-waste-ai-wb2eb/3"  
ENDPOINT = f"https://classify.roboflow.com/{MODEL_PATH}?api_key={API_KEY}"  # docs: classify.roboflow.com

#‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
uploaded = st.file_uploader("üì§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["jpg", "jpeg", "png"])
if uploaded:
    #‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
    img = Image.open(uploaded).convert("RGB")
    st.image(img, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_container_width=True)

    #‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û -> base64 ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ Roboflow Classification API
    buf = io.BytesIO()
    img.save(buf, format="JPEG")
    b64_img = base64.b64encode(buf.getvalue()).decode("utf-8")

    with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
        #‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô x-www-form-urlencoded (‡∏ï‡∏±‡∏ß body ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏ï‡∏£‡∏¥‡∏á base64)
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        resp = requests.post(ENDPOINT, data=b64_img, headers=headers, timeout=60)
        resp.raise_for_status()
        result = resp.json()

    #‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö list ‡πÅ‡∏•‡∏∞ dict ‡∏ï‡∏≤‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    #(Single-label ‡∏≠‡∏≤‡∏à‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô list, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô dict + predicted_classes)
    pred_text = ""
    try:
        #‡∏Å‡∏£‡∏ì‡∏µ list
        preds = result.get("predictions", [])
        if isinstance(preds, list) and preds:
            top = max(preds, key=lambda x: x.get("confidence", 0))
            pred_text = f"{top['class']} ({top['confidence']*100:.2f}%)"
        else:
            #‡∏Å‡∏£‡∏ì‡∏µ dict
            preds_dict = result.get("predictions", {})
            if isinstance(preds_dict, dict) and preds_dict:
                #‡πÄ‡∏•‡∏∑‡∏≠‡∏Å class ‡∏ó‡∏µ‡πà confidence ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                top_class = max(preds_dict.items(), key=lambda kv: kv[1].get("confidence", 0))[0]
                conf = preds_dict[top_class]["confidence"] * 100
                pred_text = f"{top_class} ({conf:.2f}%)"
    except Exception:
        pred_text = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ"

    if pred_text:
        st.success(f"‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: **{pred_text}**")
    else:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•")

    # Debug ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π JSON ‡∏î‡∏¥‡∏ö (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏´‡πá‡∏ô)
    with st.expander("‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö JSON"):
        st.code(json.dumps(result, ensure_ascii=False, indent=2))
