import streamlit as st
from PIL import Image
import io, base64, requests, time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö 
st.set_page_config(
    page_title="üåä Marine Waste AI",
    page_icon="ü™∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ü‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
st.markdown("""
<style>
[data-testid="stAppViewContainer"] {
  background: linear-gradient(to bottom right, #dbeeff, #f7fbfd);
  animation: fadeIn 2s ease-in;
  overflow: hidden;
}
[data-testid="stSidebar"] {
  background: linear-gradient(to bottom, #cfe0f1, #e3f2fd);
  color: #01579b;
}
@keyframes fadeIn {
  from {opacity: 0;}
  to {opacity: 1;}
}
h1, h2, h3, h4, h5 {
  color: #01579b;
  font-weight: 700;
  text-shadow: 1px 1px 2px #b0bec5;
}
.result-box {
  background-color: #e8f4fd;
  padding: 20px;
  border-radius: 15px;
  border: 2px solid #64b5f6;
  box-shadow: 0px 2px 8px rgba(0,0,0,0.08);
  animation: fadeIn 1.5s ease-in;
}
footer {
  text-align: center;
  font-size: 0.9em;
  color: #0277bd;
  margin-top: 50px;
}

/* ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ü‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏® */
.bubble {
  position: fixed;
  bottom: -120px;
  background: radial-gradient(circle at 30% 30%, rgba(255,255,255,0.9), rgba(173,216,230,0.4));
  border-radius: 50%;
  opacity: 0.8;
  box-shadow: 0 0 10px rgba(173,216,230,0.6);
  animation: rise 9s infinite ease-in;
  z-index: 1;
}
@keyframes rise {
  0% { transform: translateY(0) scale(1); opacity: 0.8; }
  100% { transform: translateY(-120vh) scale(1.6); opacity: 0; }
}
</style>

<script>
function createBubbles(){
  for(let i=0;i<15;i++){
    let bubble = document.createElement('div');
    bubble.classList.add('bubble');
    let size = Math.random()*40+20;  
    bubble.style.width = size+'px';
    bubble.style.height = size+'px';
    bubble.style.left = Math.random()*100+'%';
    bubble.style.animationDuration = (8+Math.random()*5)+'s';
    bubble.style.animationDelay = (Math.random()*5)+'s';
    document.body.appendChild(bubble);
    setTimeout(()=>bubble.remove(), 13000);
  }
}
createBubbles();
</script>
""", unsafe_allow_html=True)

# ---------- Sidebar ----------
st.sidebar.title("üì±Marine Waste AI")
st.sidebar.markdown("---")
st.sidebar.header("üëßüèΩ About the Developer")
st.sidebar.markdown("""
**‡∏ä‡∏∑‡πà‡∏≠:** ‡∏ô.‡∏™.‡∏†‡∏±‡∏ó‡∏£‡∏≤‡∏ß‡∏£‡∏£‡∏ì ‡∏û‡∏£‡∏´‡∏°‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡∏§‡∏ó‡∏ò‡∏¥‡πå  
**‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:** 681110071 üéì  

---

**Marine Waste AI** ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞‡∏ó‡∏∞‡πÄ‡∏•  
‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å ‡πÇ‡∏•‡∏´‡∏∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏®‡∏©‡∏Ç‡∏¢‡∏∞‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô ‡πÜ  
‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏à‡∏≤‡∏Å Roboflow  

üåä **‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:**  
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏ó‡∏∞‡πÄ‡∏•  
- ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°  

---

üíª Powered by [Streamlit](https://streamlit.io) & [Roboflow](https://roboflow.com)
""")

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å
st.title("üåä Marine Waste AI")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞‡∏ó‡∏∞‡πÄ‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î")

uploaded = st.file_uploader("üì§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["jpg", "jpeg", "png"])

# Roboflow API
API_KEY = "TCwrOT5oJu5pTNpnNKSV"
MODEL_PATH = "marine-waste-ai-wb2eb/3"
ENDPOINT = f"https://classify.roboflow.com/{MODEL_PATH}?api_key={API_KEY}"

if uploaded:
    image = Image.open(uploaded).convert("RGB")
    st.image(image, caption="üì∏ ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_container_width=True)

    buf = io.BytesIO()
    image.save(buf, format="JPEG")
    b64_img = base64.b64encode(buf.getvalue()).decode("utf-8")

    with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        resp = requests.post(ENDPOINT, data=b64_img, headers=headers, timeout=60)
        result = resp.json()

    try:
        preds = result.get("predictions", [])
        if isinstance(preds, list) and len(preds) > 0:
            top = max(preds, key=lambda x: x.get("confidence", 0))
            pred_class = top["class"]
            confidence = top["confidence"] * 100

            st.markdown(f"""
            <div class="result-box">
            <h3>‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</h3>
            <p><b>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞:</b> {pred_class}</p>
            <p><b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á AI:</b> {confidence:.2f}%</p>
            </div>
            """, unsafe_allow_html=True)

            st.progress(confidence / 100)
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    except Exception:
        st.error("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")

# Footer
st.markdown("""
<footer>
üíª Powered by <a href="https://streamlit.io" target="_blank">Streamlit</a> & 
<a href="https://roboflow.com" target="_blank">Roboflow</a> | Marine Waste AI üåä
</footer>
""", unsafe_allow_html=True)
